---
import { getEntry } from 'astro:content'

import { slugLabels } from '~/config/slugLabels'

const entry: any = Astro.props.entry

const collection = entry.collection
const parts: any[] = (entry.slug as string)
	? await (entry.slug as string).split('/').reduce<Promise<any[]>>(
		async (accPromise, part) => {
			const acc = await accPromise
			const partSlug = acc.length >= 1 ? `${acc[acc.length - 1].slug}/${part}` : part
			const partEntry: any = await getEntry(collection, partSlug)
			const partLabel = partEntry ? partEntry.data.title : (slugLabels[partSlug as keyof typeof slugLabels] ?? part)
			const partLink = partEntry ? `/${partEntry.slug}/` : null
			return [
				...acc,
				{
					slug: partSlug,
					label: partLabel,
					link: partLink,
				},
			]
		},
		Promise.resolve([]),
	)
	: []

if (parts.length > 0 && entry.data.title)
{
	// Use title of current page & remove link
	parts[parts.length - 1].label = entry.data.title
	parts[parts.length - 1].link = null
}
---

{parts.length > 0 &&
	<div class="sl-breadcrumb">
		<ul>
			<li>
				<a href="/">
					<span class="icon icon-[mdi--home]"></span>
				</a>
			</li>
			{parts.map((part) => (
				<li>
					{part.link
						? <a href={part.link}>{part.label}</a>
						: <span>{part.label}</span>
					}
				</li>
			))}
		</ul>
	</div>
}

<style lang="scss">
	.sl-breadcrumb {
		background-color: var(--sl-color-bg-nav);
		line-height: var(--sl-line-height-headings);
		padding: var(--sl-nav-pad-y) var(--sl-nav-pad-x);
		color: var(--sl-color-text);
		text-wrap: balance;
		border-bottom: 1px solid var(--sl-color-hairline);

		ul {
			display: flex;
			justify-content: flex-start;
			align-items: center;
			padding: 0;
			margin: 0;
			list-style: none;

			li {
				display: inline;
				margin: 0;
				padding: 0;

				&:not(:last-child) {
					&::after {
						content: '/';
						margin: 0 0.5em;
					}
				}

				span {
					opacity: 0.8;
				}

				&:last-child {
					color: var(--sl-color-text-accent);
				}

				&:first-child, &:last-child {
					span {
						opacity: 1;
					}
				}
			}
		}

		.icon {
			vertical-align: -0.125em;
		}
	}

	.sl-breadcrumb :global(a) {
		color: var(--sl-color-text);
		text-decoration: none;
	}
</style>
